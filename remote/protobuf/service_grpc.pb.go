// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: service.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StateService_GetStateInfo_FullMethodName    = "/example.StateService/GetStateInfo"
	StateService_GetStateUpdates_FullMethodName = "/example.StateService/GetStateUpdates"
	StateService_UpdateState_FullMethodName     = "/example.StateService/UpdateState"
	StateService_Chat_FullMethodName            = "/example.StateService/Chat"
)

// StateServiceClient is the client API for StateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the service
type StateServiceClient interface {
	// Unary RPC
	GetStateInfo(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error)
	// Server-Side Streaming RPC
	GetStateUpdates(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StateUpdate], error)
	// Client-Side Streaming RPC
	UpdateState(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StateRequest, StateResponse], error)
	// Bidirectional Streaming RPC
	Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StateRequest, StateUpdate], error)
}

type stateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateServiceClient(cc grpc.ClientConnInterface) StateServiceClient {
	return &stateServiceClient{cc}
}

func (c *stateServiceClient) GetStateInfo(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, StateService_GetStateInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServiceClient) GetStateUpdates(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StateUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StateService_ServiceDesc.Streams[0], StateService_GetStateUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StateRequest, StateUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StateService_GetStateUpdatesClient = grpc.ServerStreamingClient[StateUpdate]

func (c *stateServiceClient) UpdateState(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StateRequest, StateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StateService_ServiceDesc.Streams[1], StateService_UpdateState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StateRequest, StateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StateService_UpdateStateClient = grpc.ClientStreamingClient[StateRequest, StateResponse]

func (c *stateServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StateRequest, StateUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StateService_ServiceDesc.Streams[2], StateService_Chat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StateRequest, StateUpdate]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StateService_ChatClient = grpc.BidiStreamingClient[StateRequest, StateUpdate]

// StateServiceServer is the server API for StateService service.
// All implementations must embed UnimplementedStateServiceServer
// for forward compatibility.
//
// Define the service
type StateServiceServer interface {
	// Unary RPC
	GetStateInfo(context.Context, *StateRequest) (*StateResponse, error)
	// Server-Side Streaming RPC
	GetStateUpdates(*StateRequest, grpc.ServerStreamingServer[StateUpdate]) error
	// Client-Side Streaming RPC
	UpdateState(grpc.ClientStreamingServer[StateRequest, StateResponse]) error
	// Bidirectional Streaming RPC
	Chat(grpc.BidiStreamingServer[StateRequest, StateUpdate]) error
	mustEmbedUnimplementedStateServiceServer()
}

// UnimplementedStateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStateServiceServer struct{}

func (UnimplementedStateServiceServer) GetStateInfo(context.Context, *StateRequest) (*StateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateInfo not implemented")
}
func (UnimplementedStateServiceServer) GetStateUpdates(*StateRequest, grpc.ServerStreamingServer[StateUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method GetStateUpdates not implemented")
}
func (UnimplementedStateServiceServer) UpdateState(grpc.ClientStreamingServer[StateRequest, StateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (UnimplementedStateServiceServer) Chat(grpc.BidiStreamingServer[StateRequest, StateUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedStateServiceServer) mustEmbedUnimplementedStateServiceServer() {}
func (UnimplementedStateServiceServer) testEmbeddedByValue()                      {}

// UnsafeStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateServiceServer will
// result in compilation errors.
type UnsafeStateServiceServer interface {
	mustEmbedUnimplementedStateServiceServer()
}

func RegisterStateServiceServer(s grpc.ServiceRegistrar, srv StateServiceServer) {
	// If the following call pancis, it indicates UnimplementedStateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StateService_ServiceDesc, srv)
}

func _StateService_GetStateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServiceServer).GetStateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateService_GetStateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServiceServer).GetStateInfo(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateService_GetStateUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServiceServer).GetStateUpdates(m, &grpc.GenericServerStream[StateRequest, StateUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StateService_GetStateUpdatesServer = grpc.ServerStreamingServer[StateUpdate]

func _StateService_UpdateState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StateServiceServer).UpdateState(&grpc.GenericServerStream[StateRequest, StateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StateService_UpdateStateServer = grpc.ClientStreamingServer[StateRequest, StateResponse]

func _StateService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StateServiceServer).Chat(&grpc.GenericServerStream[StateRequest, StateUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StateService_ChatServer = grpc.BidiStreamingServer[StateRequest, StateUpdate]

// StateService_ServiceDesc is the grpc.ServiceDesc for StateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.StateService",
	HandlerType: (*StateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStateInfo",
			Handler:    _StateService_GetStateInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStateUpdates",
			Handler:       _StateService_GetStateUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateState",
			Handler:       _StateService_UpdateState_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _StateService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
